<Window x:Name="main" x:Class="h18.Azdo.Library.Editor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:h18.Azdo.Library.Editor"
        mc:Ignorable="d"
        Title="Variable groups Editor" Height="450" Width="800" SnapsToDevicePixels="True" WindowStartupLocation="CenterScreen" WindowState="Maximized" Loaded="main_Loaded">
    <Window.Resources>

        <Style x:Key="ContentCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="LightGreen"/>
            <!--<Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding}">
                            <TextBlock.ContextMenu>
                                <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="Generate password" Command="{Binding GeneratePassword, Source={x:Reference Name=main}}" CommandParameter="{Binding}" />
                                    <MenuItem Header="Generate resource name" Command="{Binding GenerateResourceName}" />
                                </ContextMenu>
                            </TextBlock.ContextMenu>
                        </TextBlock>
                    </DataTemplate>
                </Setter.Value>
            </Setter>-->
            <!--<Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                        <MenuItem Header="Generate password" Command="{Binding GeneratePassword, Source={x:Reference Name=main}}" CommandParameter="{Binding}" />
                        <MenuItem Header="Generate resource name" Command="{Binding GenerateResourceName}" />
                    </ContextMenu>
                </Setter.Value>
            </Setter>-->
        </Style>
        <Style x:Key="ProductionCellStyle" BasedOn="{ StaticResource ContentCellStyle}" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Orange"/>
        </Style>
        <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>
        <Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <Border.ContextMenu>
                                <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="Generate password" Command="{Binding GeneratePassword, Source={x:Reference Name=main}}" CommandParameter="{Binding}" />
                                    <MenuItem Header="Generate resource name" Command="{Binding GenerateResourceName}" />
                                </ContextMenu>
                            </Border.ContextMenu>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid Background="{DynamicResource WindowBackground}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="3"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="3"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <ToolBar VerticalAlignment="Top">
                <Button Content="Connect" x:Name="btnConnect" Click="btnConnect_Click" />
                <TextBlock Text="Project" VerticalAlignment="Center"/>
                <ComboBox IsEditable="True" />
                <Button x:Name="btnGroups"  Content="Groups" Click="btnGroups_Click" IsEnabled="False"/>
                <Button x:Name="btnLoad"  Content="Load" Click="btnLoad_Click" IsEnabled="False"/>
                <Button x:Name="btnUpdate"  Content="Save" Click="btnUpdate_Click" IsEnabled="False"/>
                <Button x:Name="btnRefresh"  Content="Reload" Click="btnRefresh_Click" IsEnabled="False" ToolTip="You will lose unsaved changes"/>
            </ToolBar>
            <Grid Grid.Row="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Commands"/>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Commands"/>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Commands"/>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Commands"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="Selected groups :"/>
                <TextBlock Grid.Column="2" Text="{Binding SelectedGroups}"/>
                <!--<ListBox x:Name="lbGroups2" Grid.Column="2" SelectionMode="Extended">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Name}"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>-->

            </Grid>
            <DataGrid CellStyle="{DynamicResource DataGridCellStyle1}" Grid.Row="4" x:Name="dgGroups" AutoGenerateColumns="False" ItemsSource="{Binding Variables}">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Variable" Binding="{Binding Name, Mode=TwoWay}" />
                    <DataGridCheckBoxColumn Header="Is Secret" Binding="{Binding IsSecret, Mode=TwoWay}"/>
                </DataGrid.Columns>
            </DataGrid>

        </Grid>
        <Grid x:Name="grdLoading" Background="#c0353535" Visibility="Collapsed">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <TextBlock Text="Loading ..." />
                <ProgressBar IsIndeterminate="True" Width="250" Height="20"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
